#define F_CPU 1000000UL  // 1 MHz
#include <avr/io.h>
#include <util/delay.h>
#include <avr/interrupt.h>
#include <stdio.h>  // For sprintf

#define Relay_PIN PB0   // Define LED1 pin (B0) relay
#define Relay_PIN2 PB1  // Define LED2 pin (B1) fan

// LCD pin definitions based on your connections
#define LCD_RS PD0 // RS pin connected to PD0
#define LCD_E  PD5 // Enable pin connected to PD5
#define LCD_D4 PD1 // D4 pin connected to PD1
#define LCD_D5 PD2 // D5 pin connected to PD2
#define LCD_D6 PD3 // D6 pin connected to PD3
#define LCD_D7 PD4 // D7 pin connected to PD4

// Button pin definitions
#define BUTTON_INC PD7 // Button for increment
#define BUTTON_DEC PB7  // Button for decrement connected to PD7
#define BUTTON_MODE PC1  // Third button for mode switching

uint8_t inc_button_hold_count = 0;
uint8_t dec_button_hold_count = 0;
uint8_t mode_button_hold_count = 0;
uint8_t mode = 0;

// Variables to track button states
uint8_t button_mode_prev_state = 0;
uint8_t button_inc_prev_state = 0;
uint8_t button_dec_prev_state = 0;

uint8_t RH_I, RH_D, temp_I, temp_D, checksum, dataByte = 0;
uint16_t light_value, temp_sensor_value;
double temp;
int inttemp;
double pokabl;


int value = 20;  // Variable to store the incremented/decremented value
int ledtimer=0;
double timer =0;
int cnt=3;
int cnt2 = 0;
int cnttimer1=0;




void pin_init()
{
	// Set LED pin as output
	DDRB |= (1 << Relay_PIN);
	DDRB |= (1 << Relay_PIN2);
	
	// Set button pins as inputs with pull-up resistors
	
	DDRB &= ~(1 << BUTTON_DEC);  // Set PD7 as inputs
	PORTB |= (1 << BUTTON_DEC);    // Enable pull-up resistors on PD7
	
	DDRD &= ~(1 << BUTTON_INC);  // Set PB6 as input
	PORTD |= (1 << BUTTON_INC);   // Enable pull-up resistor
	
	// Set mode button as input with pull-up resistor
	DDRC &= ~(1 << BUTTON_MODE);
	PORTC |= (1 << BUTTON_MODE);  // Enable pull-up resistor on PC0
}

//brightness of lcd
void init_timer0() {
	DDRD = (1 << PD6); // Set PD6 as output for PWM control
	// Timer 0 configuration for PWM
	TCCR0A = (1 << COM0A1) | (1 << WGM00) | (1 << WGM01); // Fast PWM mode, non-inverted PWM
	TIMSK0 = (1 << TOIE0); // Enable Timer 0 overflow interrupt
	TCCR0B = (1 << CS01); // Set Timer 0 prescaler to 8
}

void timer1_init(void)
{
	// Set Timer1 to CTC mode (Clear Timer on Compare Match)
	TCCR1B |= (1 << WGM12);
	
	// Set clock prescaler to 1024 (for a longer delay)
	TCCR1B |= (1 << CS12) | (1 << CS10);

	// Calculate and set OCR1A valuey
	OCR1A = 58593;  //58593 Value for a 60s becouse the formula 

	// Enable Timer/Counter1 Compare Match A interrupt
	TIMSK1 |= (1 << OCIE1A);
	
	// Enable global interrupts
	sei();
	
}

void init_timer2()
{
	// Set PC2 as output
	DDRC |= (1 << PC2);

	// Set Timer2 in CTC mode with prescaler 1024
	TCCR2A = (1 << WGM21); // Clear Timer on Compare Match mode
	TCCR2B = (1 << CS22) | (1 << CS21) | (1 << CS20); // Prescaler 1024

	// Set the compare value OCR2A to 243
	OCR2A = 244;

	// Start the timer
	TCNT2 = 0;
	// Enable Timer2 Compare Match interrupt
	TIMSK2 |= (1 << OCIE2A);
	// Enable global interrupts
	sei();
}

// ADC initialization for photoresistor (connected to PC0/ADC0)
void ADC_init() {
	// Set ADC reference to AVcc (5V)
	ADMUX = (1 << REFS0); // REFS0 = 1, REFS1 = 0 (AVcc with external capacitor at AREF pin)
	
	// Set ADC prescaler to 128 for 125 kHz ADC clock (16 MHz / 128)
	ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
}

// ADC read function for a specific channel (e.g., ADC0, ADC3)
uint16_t ADC_read(uint8_t channel) {
	uint32_t sum = 0;
	const uint8_t num_samples = 100; // Number of samples to average
	
	// Select ADC channel
	ADMUX = (ADMUX & 0xF0) | (channel & 0x0F);

	// Take multiple samples and average
	for (uint8_t i = 0; i < num_samples; i++) {
		// Start conversion
		ADCSRA |= (1 << ADSC);

		// Wait for conversion to complete
		while (ADCSRA & (1 << ADSC));

		// Add the result to the sum
		sum += ADC;
	}

	// Return the average value
	return (uint16_t)(sum / num_samples);
}




// Helper function to send a pulse to the enable pin
void lcd_enable_pulse(void) {
	PORTD |= (1 << LCD_E);   // Enable high
	_delay_us(1);
	PORTD &= ~(1 << LCD_E);  // Enable low
	_delay_ms(2);            // Short delay for command execution
}

// Send a 4-bit command or data to the LCD
void lcd_send_nibble(unsigned char data) {
	// Send lower nibble (D4-D7)
	if (data & 0x01) PORTD |= (1 << LCD_D4); else PORTD &= ~(1 << LCD_D4);
	if (data & 0x02) PORTD |= (1 << LCD_D5); else PORTD &= ~(1 << LCD_D5);
	if (data & 0x04) PORTD |= (1 << LCD_D6); else PORTD &= ~(1 << LCD_D6);
	if (data & 0x08) PORTD |= (1 << LCD_D7); else PORTD &= ~(1 << LCD_D7);
	lcd_enable_pulse();
}

// Send a command to the LCD
void lcd_command(unsigned char cmd) {
	PORTD &= ~(1 << LCD_RS);  // RS = 0 for command
	lcd_send_nibble(cmd >> 4); // Send upper nibble
	lcd_send_nibble(cmd);      // Send lower nibble
}

// Send data to the LCD
void lcd_data(unsigned char data) {
	PORTD |= (1 << LCD_RS);   // RS = 1 for data
	lcd_send_nibble(data >> 4); // Send upper nibble
	lcd_send_nibble(data);      // Send lower nibble
}

// Initialize the LCD in 4-bit mode
void lcd_init(void) {
	// Set LCD pins as outputs
	DDRD |= (1 << LCD_RS) | (1 << LCD_E) | (1 << LCD_D4) | (1 << LCD_D5) | (1 << LCD_D6) | (1 << LCD_D7);
	
	_delay_ms(20); // Wait for LCD to power up
	
	// LCD initialization sequence in 4-bit mode
	lcd_command(0x03); // Wake-up sequence
	_delay_ms(5);
	lcd_command(0x03);
	_delay_us(100);
	lcd_command(0x03);
	lcd_command(0x02); // Switch to 4-bit mode

	// Set up the LCD with 2 lines and 5x8 characters
	lcd_command(0x28); // 4-bit mode, 2 lines, 5x8 dots
	lcd_command(0x0C); // Display ON, cursor OFF
	lcd_command(0x06); // Entry mode: increment automatically
	lcd_command(0x01); // Clear display
	_delay_ms(2);
}

// Clear the LCD screen
void lcd_clear(void) {
	lcd_command(0x01); // Clear display
	_delay_ms(2);
}

// Move the cursor to a specific position (x: column, y: row)
void lcd_goto_xy(unsigned char x, unsigned char y) {
	unsigned char addr = (y == 0) ? 0x80 : 0xC0; // Line 0 or 1
	addr += x;
	lcd_command(addr);
}

// Print a string to the LCD
void lcd_puts(const char *str) {
	while (*str) {
		lcd_data(*str++);
	}
}

// Print an integer to the LCD and pad with spaces to clear previous characters
void lcd_put_number(int num) {
	char buffer[16];  // Buffer to hold the string representation of the number
	sprintf(buffer, "%d", num);  // Convert number to string
	lcd_puts(buffer);  // Display the string on the LCD
	
	// Pad with spaces to clear any leftover digits
	int length = strlen(buffer);  // Get the length of the number string
	while (length < 4) {  // Assuming max number length is 4 digits (e.g., 1023)
		length++;
	}
}

// read with Debounce function 
uint8_t button_read(uint8_t buttonPin, volatile uint8_t *port) {
	if (!(*port & (1 << buttonPin))) {  // Check if button is pressed (active low)
		_delay_ms(10);  // Debounce delay
		if (!(*port & (1 << buttonPin))) {  // Check again after debounce delay
			return 1;
		}
	}
	return 0;
}


void timer_display(double timer)
{
	lcd_goto_xy(9, 1);  // Move cursor to the second line (0,1)
	lcd_puts("T:");  // Print "Tim:"
	lcd_goto_xy(11, 1);  // Move cursor to print the value

	 int total_hours = (int)timer / 60;            // Calculate total hours
	 double remaining_minutes = fmod(timer, 60);   // Use fmod to get the remainder (minutes)

	if (timer > 0)
	{
		lcd_puts("     ");
			
		if (total_hours >= 10)
		{
			lcd_put_number(total_hours);  // Display integer part
			lcd_goto_xy(13, 1);  // Move cursor to print the value
			lcd_puts("h  ");
		}

		else
		{
			// Display the formatted value
			lcd_put_number(total_hours);  // Display integer part
			lcd_goto_xy(12, 1);  // Move cursor to print the value
			lcd_puts("h");                 // Add decimal point
			lcd_goto_xy(13, 1);  // Move cursor to print the value
			lcd_put_number(remaining_minutes);  // Display fractional part
			lcd_goto_xy(15, 1);  // Move cursor to print the value
			lcd_puts("m");
		}
	}
	else
	{
		lcd_puts("OFF  ");
	}
}

void RTemp_display(int temp, int pokabl)
{
	// Display the temperature on the LCD
	lcd_goto_xy(0, 0);  // Move cursor to the first line (0,0)
	lcd_puts("RTemp:");  // Print "Temp:"
	lcd_goto_xy(6, 0);  // Move cursor for temperature value
	lcd_put_number(temp);  // Print the temperature value
	
	lcd_goto_xy(8, 0);  // Move cursor to the first line (0,0)
	lcd_puts(".");  // Print "Temp:"
	lcd_goto_xy(9, 0);  // Move cursor for temperature value
	lcd_put_number(pokabl);  // Print the temperature value
}

void STemp_display(int value)
{
	lcd_goto_xy(0, 1);  // Move cursor to the second line (0,1)
	lcd_puts("STemp:");  // Print 
	lcd_goto_xy(6, 1);  // Move cursor to print the value
	lcd_put_number(value);  // Display value for mode 0
}


ISR(TIMER0_OVF_vect)
{

	// Check mode button release
	uint8_t mode_current_state = button_read(BUTTON_MODE, &PINC);
	if (!mode_current_state && button_mode_prev_state)
	{
		// Button was released
		mode = !mode;
		cnt = 0;
	}
	button_mode_prev_state = mode_current_state;

	// Check increment button release
	uint8_t inc_current_state = button_read(BUTTON_INC, &PIND);
	if (!inc_current_state && button_inc_prev_state)
	{
		// Button was released
		if (mode == 0)
		{
			value++;
		}
		else if (mode == 1)
		{
			timer += 30;
		}
	}
	button_inc_prev_state = inc_current_state;

	// Check decrement button release
	uint8_t dec_current_state = button_read(BUTTON_DEC, &PINB);
	if (!dec_current_state && button_dec_prev_state)
	{
		// Button was released
		if (mode == 0)
		{
			value--;
		}
		else if (mode == 1)
		{
			timer -= 30;
			if (timer < 0)
			{
				timer = 0;
			}
		}
	}
	button_dec_prev_state = dec_current_state;
}

ISR(TIMER1_COMPA_vect)
{
	cnttimer1 +=1;
	if (cnttimer1 >= 1)
	{			
				
		        // Read photoresistor value from ADC0 (PC0)
		        light_value = ADC_read(0);
				OCR0A = light_value / 4;
		        // Read temperature sensor value from ADC3 (PC3)
		        temp_sensor_value = ADC_read(3);
				temp = ((float)temp_sensor_value / 1024.0) * 5.0 *100.0;
				inttemp=(int)temp;
				
				        // Calculate total hours
				 pokabl = (int)((temp - (int)temp )* 100.0);
		timer -=10;
	
		if (timer <0)
		{
			timer =0;
		}
		cnttimer1 = 0;
	}
}

ISR(TIMER2_COMPA_vect) 
{
	// Interrupt service routine for Timer2 Compare Match
	// Toggle PC2
	ledtimer++;
	
	if (ledtimer ==2)
	{
		PORTC ^= (1 << PC2);
		ledtimer=0;
	}
}

int main(void) {
	//pin init
	pin_init();
	//photoresistor
	ADC_init();
	init_timer0();
	// Initialize Timer1
	timer1_init();
	//lcd brightness
	//led blink
	init_timer2();
	// Initialize LCD
	lcd_init();
	lcd_clear(); // Clear the screen at the start
	
		 // Read photoresistor value from ADC0 (PC0)
		 light_value = ADC_read(0);
		 OCR0A = light_value / 4;
		 // Read temperature sensor value from ADC3 (PC3)
		 temp_sensor_value = ADC_read(3);
		 temp = ((float)temp_sensor_value / 1024.0) * 5.0 *100.0;
		 inttemp=(int)temp;
		 pokabl = (int)((temp - (int)temp )* 100.0);


	while (1) {
		
		RTemp_display(inttemp,pokabl);
		STemp_display(value);								
		timer_display(timer);
		
		//set temp blinking
		if(mode == 0)
		{
			if (cnt < 3)
			{
					lcd_goto_xy(0, 1);  // Move cursor to the second line (0,1)
					lcd_puts("      ");  // Print 
					lcd_goto_xy(6, 1);  // Move cursor to print the value
					lcd_puts("  ");  // Display value for mode 0
					_delay_ms(200);
					STemp_display(value);

					cnt++;	
			  }
		
			
			else
			{
			   STemp_display(value);
			}
		}
		//timer blinking
		if(mode == 1)
		{
			if (cnt < 3)
			{
			
					lcd_goto_xy(9, 1);  // Move cursor to the second line (0,1)
					lcd_puts("    ");  // Print 
					lcd_goto_xy(13, 1);  // Move cursor to print the value
					lcd_puts("   ");  // Display value for mode 0
					
					timer_display(timer);
					_delay_ms(200);
					

					cnt++;
				
			}
				else
				{
					timer_display(timer);
				}
		}
		
		
					if (timer == 0)
					{
						PORTB &= ~(1 << Relay_PIN);
						PORTB &= ~(1 << Relay_PIN2);
					}
					
					else
					{
											// Control LED1 and LED2 based on the comparison between setpoint and temperature
											if (value > temp + 0.5)
											{
												PORTB |= (1 << Relay_PIN);  // Turn on LED1 if setpoint > temp + 0.5
												PORTB &= ~(1 << Relay_PIN2); // Turn off LED2
											}
											
											else if (value < temp - 0.5)
											{
												PORTB |= (1 << Relay_PIN2); // Turn on LED2 if setpoint < temp - 0.5
												PORTB &= ~(1 << Relay_PIN);  // Turn off LED1
											}
											
											else
											{
												// Turn off both LEDs if setpoint is within 0.5 degrees of room temperature
												
												PORTB &= ~(1 << Relay_PIN);
												PORTB &= ~(1 << Relay_PIN2);
											}
					}


			

					
		}
	return 0;
}
